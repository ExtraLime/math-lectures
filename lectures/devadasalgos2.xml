<?xml version="1.0" encoding="UTF-8"?>
<timedtext format="3">
<body>
<p t="50" d="1720">The following
content is provided</p>
<p t="1770" d="2249">under a Creative
Commons license.</p>
<p t="4019" d="2841">Your support will help MIT
OpenCourseWare continue</p>
<p t="6860" d="3860">to offer high quality
educational resources for free.</p>
<p t="10720" d="2600">To make a donation or
view additional materials</p>
<p t="13320" d="3887">from hundreds of MIT courses,
visit MIT OpenCourseWare</p>
<p t="17207" d="625">at ocw.mit.edu.</p>
<p t="22452" d="1083">PROFESSOR: Hey, everybody.</p>
<p t="23535" d="3425">You ready to learn
some algorithms?</p>
<p t="26960" d="1390">Yeah!</p>
<p t="28350" d="1230">Let's do it.</p>
<p t="29580" d="960">I'm Eric Domain.</p>
<p t="30540" d="1410">You can call me Eric.</p>
<p t="31950" d="3070">And the last class, we
sort of jumped into things.</p>
<p t="35020" d="1590">We studied peak
finding and looked</p>
<p t="36610" d="1330">at a bunch of algorithms
for peak finding</p>
<p t="37940" d="940">on your problem set.</p>
<p t="38880" d="3134">You've already
seen a bunch more.</p>
<p t="42014" d="2416">And in this class, we're going
to do some more algorithms.</p>
<p t="44430" d="300">Don't worry.</p>
<p t="44730" d="940">That will be at the end.</p>
<p t="45670" d="1880">We're going to talk about
another problem, document</p>
<p t="47550" d="2400">distance, which will be a
running example for a bunch</p>
<p t="49950" d="2410">of topics that we
cover in this class.</p>
<p t="52360" d="3280">But before we go there, I wanted
to take a step back and talk</p>
<p t="55640" d="2760">about, what actually
is an algorithm?</p>
<p t="58400" d="2360">What is an algorithm
allowed to do?</p>
<p t="60760" d="3942">And also deep philosophical
questions like, what is time?</p>
<p t="64702" d="1708">What is the running
time of an algorithm?</p>
<p t="66410" d="1650">How do we measure it?</p>
<p t="68060" d="1970">And what are the rules the game?</p>
<p t="70030" d="3090">For fun, I thought I
would first mention</p>
<p t="73120" d="4400">where the word comes
from, the word algorithm.</p>
<p t="77520" d="4870">It comes from this guy,
a little hard to spell.</p>
<p t="87180" d="4030">Al-Khwarizmi, who is sort
of the father of algebra.</p>
<p t="91210" d="4030">He wrote this book called "The
Compendious Book on Calculation</p>
<p t="95240" d="3500">by Completion and
Balancing" back in the day.</p>
<p t="98740" d="1680">And it was in
particular about how</p>
<p t="100420" d="3774">to solve linear and
quadratic equations.</p>
<p t="104194" d="1166">So the beginning of algebra.</p>
<p t="105360" d="1791">I don't think he invented
those techniques.</p>
<p t="107151" d="1629">But he was sort of
the textbook writer</p>
<p t="108780" d="2046">who wrote sort of how
people solved them.</p>
<p t="110826" d="1374">And you can think
of how to solve</p>
<p t="112200" d="2350">those equations as
early algorithms.</p>
<p t="114550" d="1530">First, you take this number.</p>
<p t="116080" d="890">You multiply by this.</p>
<p t="116970" d="4690">You add it or you reduce
to squares, whatever.</p>
<p t="121660" d="3440">So that's where the word
algebra comes from and also</p>
<p t="125100" d="1590">where the word
algorithm comes from.</p>
<p t="126690" d="3025">There aren't very many
words with these roots.</p>
<p t="129715" d="865">So there you go.</p>
<p t="130580" d="755">Some fun history.</p>
<p t="135320" d="2230">What's an algorithm?</p>
<p t="137550" d="2320">I'll start with sort of
some informal definitions</p>
<p t="139870" d="2200">and then the point
of this lecture.</p>
<p t="142070" d="4150">And the idea of a
model of computation</p>
<p t="146220" d="2464">is to formally specify
what an algorithm is.</p>
<p t="148684" d="2166">I don't want to get super
technical and formal here,</p>
<p t="150850" d="2050">but I want to give
you some grounding</p>
<p t="152900" d="2430">so when we write Python code,
when we write pseudocode,</p>
<p t="155330" d="2724">we have some idea what
things actually cost.</p>
<p t="158054" d="916">This is a new lecture.</p>
<p t="158970" d="1500">We've never done
this before in 006.</p>
<p t="160470" d="2330">But I think it's important.</p>
<p t="162800" d="3070">So at a high level,
you can think</p>
<p t="165870" d="3730">of an algorithm is just
a-- I'm sure you've</p>
<p t="169600" d="1270">seen the definition before.</p>
<p t="174550" d="3239">It's a way to define computation
or computational procedure</p>
<p t="177789" d="1041">for solving some problem.</p>
<p t="185030" d="1621">So whereas computer
code, I mean,</p>
<p t="186651" d="1749">it could just be running
in the background</p>
<p t="188400" d="1166">all the time doing whatever.</p>
<p t="189566" d="2434">An algorithm we think
of as having some input</p>
<p t="192000" d="1800">and generating some output.</p>
<p t="193800" d="1970">Usually, it's to
solve some problem.</p>
<p t="200040" d="2000">You want to know is this
number prime, whatever.</p>
<p t="202040" d="500">Question?</p>
<p t="202540" d="3580">AUDIENCE: Can you turn up
the volume for your mic?</p>
<p t="206120" d="2830">PROFESSOR: This microphone does
not feed into the AV system.</p>
<p t="208950" d="2116">So I shall just talk louder, OK?</p>
<p t="213790" d="3010">And quiet the set, please.</p>
<p t="216800" d="1350">OK, so that's an algorithm.</p>
<p t="218150" d="1740">You take some input.</p>
<p t="219890" d="1430">You run it through.</p>
<p t="221320" d="1690">You compute some output.</p>
<p t="223010" d="2200">Of course, computer
code can do this too.</p>
<p t="225210" d="2930">An algorithm is basically
the mathematical analog</p>
<p t="228140" d="1240">of a computer program.</p>
<p t="229380" d="3240">So if you want to reason about
what computer programs do,</p>
<p t="232620" d="2629">you translate it into
the world algorithms.</p>
<p t="235249" d="2291">And vice versa, you want to
solve some problem-- first,</p>
<p t="237540" d="3170">you usually develop an
algorithm using mathematics,</p>
<p t="240710" d="1109">using this class.</p>
<p t="241819" d="1791">And then you convert
it into computer code.</p>
<p t="243610" d="2150">And this class is about
that transition from one</p>
<p t="245760" d="1350">to the other.</p>
<p t="247110" d="3155">You can draw a picture
of sort of analogs.</p>
<p t="253660" d="3109">So an algorithm is a
mathematical analog</p>
<p t="256769" d="3520">of a computer program.</p>
<p t="260289" d="3965">A computer program is built on
top of a programming language.</p>
<p t="264254" d="1791">And it's written in a
programming language.</p>
<p t="273740" d="3020">The mathematical analog
of a programming language,</p>
<p t="276760" d="2870">what we write algorithms
in, usually we</p>
<p t="279630" d="5260">write them in pseudocode,
which is basically</p>
<p t="284890" d="4760">another fancy word for
structured English,</p>
<p t="289650" d="2300">good English, whatever
you want to say.</p>
<p t="291950" d="2250">Of course, you could use
another natural language.</p>
<p t="294200" d="3940">But the idea is, you need to
express that algorithm in a way</p>
<p t="298140" d="2470">that people can understand
and reason about formally.</p>
<p t="300610" d="1740">So that's the structured part.</p>
<p t="302350" d="3430">Pseudocode means lots
of different things.</p>
<p t="305780" d="2260">It's just sort of an abstract
how you would write down</p>
<p t="308040" d="2590">formal specification
without necessarily being</p>
<p t="310630" d="3109">able to actually run
it on a computer.</p>
<p t="313739" d="2291">Though there's a particular
pseudocode in your textbook</p>
<p t="316030" d="2020">which you probably
could run on a computer.</p>
<p t="318050" d="1376">A lot of it, anyway.</p>
<p t="319426" d="1624">But you don't have
to use that version.</p>
<p t="321050" d="4900">It just makes sense to humans
who do the mathematics.</p>
<p t="325950" d="4470">OK, and then ultimately, this
program runs on a computer.</p>
<p t="330420" d="3920">You all have computers,
probably in your pockets.</p>
<p t="334340" d="4790">There's an analog of a computer
in the mathematical world.</p>
<p t="339130" d="3100">And that is the
model of computation.</p>
<p t="342230" d="4330">And that's sort of the focus of
the first part of this lecture.</p>
<p t="346560" d="4290">Model of computation says what
your computer is allowed to do,</p>
<p t="350850" d="2920">what it can do in
constant time, basically?</p>
<p t="353770" d="3690">And that's what I want
to talk about here.</p>
<p t="357460" d="15620">So the model of computation
specifies basically</p>
<p t="373080" d="15210">what operations you
can do in an algorithm</p>
<p t="388290" d="1890">and how much they cost.</p>
<p t="390180" d="1250">This is the what is time.</p>
<p t="398274" d="1416">So for each
operation, we're going</p>
<p t="399690" d="1860">to specify how
much time it costs.</p>
<p t="401550" d="2130">Then the algorithm does
a bunch of operations.</p>
<p t="403680" d="1833">They're combined together
with control flow,</p>
<p t="405513" d="2547">for loops, if statements,
stuff like that which we're not</p>
<p t="408060" d="2220">going to worry about too much.</p>
<p t="410280" d="2160">But obviously, we'll
use them a lot.</p>
<p t="412440" d="2580">And what we count is how much
do each of the operations cost.</p>
<p t="415020" d="700">You add them up.</p>
<p t="415720" d="2374">That is the total cost
of your algorithm.</p>
<p t="418094" d="1916">So in particular, we
care mostly in this class</p>
<p t="420010" d="1950">about running time.</p>
<p t="421960" d="1940">Each operation has a time cost.</p>
<p t="423900" d="1060">You add those up.</p>
<p t="424960" d="2440">That's running time
of the algorithm.</p>
<p t="427400" d="7574">OK, so let's-- I'm going to
cover two models of computation</p>
<p t="434974" d="2416">which you can just think of
as different ways of thinking.</p>
<p t="437390" d="1990">You've probably seen
them in some sense</p>
<p t="439380" d="3270">as-- what you call them?</p>
<p t="442650" d="2680">Styles of programming.</p>
<p t="445330" d="3120">Object oriented style of
programming, more assembly</p>
<p t="448450" d="1080">style of programming.</p>
<p t="449530" d="2546">There's lots of different
styles of programming languages</p>
<p t="452076" d="1624">which I'm not going
to talk about here.</p>
<p t="453700" d="2210">But you've see analogs if
you've seen those before.</p>
<p t="458550" d="3030">And these models
really give you a way</p>
<p t="461580" d="3360">of structuring your
thinking about how</p>
<p t="464940" d="1830">you write an algorithm.</p>
<p t="466770" d="2250">So they are the random access
machine and the pointer</p>
<p t="469020" d="1990">machine.</p>
<p t="471010" d="13540">So we'll start with random
access machine, also known</p>
<p t="484550" d="2980">as the RAM.</p>
<p t="487530" d="2929">Can someone tell me what
else RAM stands for?</p>
<p t="490459" d="1291">AUDIENCE: Random Access Memory?</p>
<p t="491750" d="1470">PROFESSOR: Random Access Memory.</p>
<p t="493220" d="2640">So this is both confusing
but also convenience.</p>
<p t="495860" d="3010">Because RAM simultaneously
stands for two things</p>
<p t="498870" d="2265">and they mean almost the
same thing, but not quite.</p>
<p t="501135" d="1875">So I guess that's more
confusing than useful.</p>
<p t="503010" d="1550">But there you go.</p>
<p t="504560" d="6684">So we have random access memory.</p>
<p t="511244" d="1136">Oh, look at that.</p>
<p t="512380" d="3169">Fits perfectly.</p>
<p t="515549" d="1791">And so we're thinking,
this is a real--</p>
<p t="517340" d="3790">this is-- random access memory
is over here in real computer</p>
<p t="521130" d="500">land.</p>
<p t="521630" d="2179">That's like, D-RAM
SD-RAM, whatever--</p>
<p t="523809" d="4501">the things you buy and stick
into your motherboard, your GP,</p>
<p t="528310" d="880">or whatever.</p>
<p t="529190" d="3886">And over here, the mathematical
analog of-- so here's,</p>
<p t="533076" d="499">it's a RAM.</p>
<p t="533575" d="1495">Here, it's also a RAM.</p>
<p t="535070" d="2480">Here, it's a random
access machine.</p>
<p t="537550" d="3010">Here, it's a random
access memory.</p>
<p t="540560" d="1890">It's technical detail.</p>
<p t="542450" d="7230">But the idea is, if you look
at RAM that's in your computer,</p>
<p t="549680" d="2630">it's basically a
giant array, right?</p>
<p t="552310" d="3780">You can go from zero
to, I don't know.</p>
<p t="556090" d="3990">A typical chip these days is
like four gigs in one thing.</p>
<p t="560080" d="1810">So you can go from
zero to four gigs.</p>
<p t="561890" d="3770">You can access anything in the
middle there in constant time.</p>
<p t="565660" d="2830">To access something, you
need to know where it is.</p>
<p t="568490" d="1780">That's random access memory.</p>
<p t="570270" d="1050">So that's an array.</p>
<p t="574490" d="1600">So I'll just draw a big picture.</p>
<p t="576090" d="1400">Here's an array.</p>
<p t="577490" d="4350">Now, RAM is usually
organized by words.</p>
<p t="581840" d="4050">So these are a
machine word, which</p>
<p t="585890" d="1620">we're going to
put in this model.</p>
<p t="587510" d="4000">And then there's address zero,
address one, address two.</p>
<p t="591510" d="1640">This is the fifth word.</p>
<p t="593150" d="920">And just keeps going.</p>
<p t="594070" d="1416">You can think of
this as infinite.</p>
<p t="595486" d="2084">Or the amount that
you use, that's</p>
<p t="597570" d="4090">the space of your algorithm, if
you care about storage space.</p>
<p t="601660" d="1950">So that's basically it.</p>
<p t="603610" d="2390">OK, now how do we-- this is
the memory side of things.</p>
<p t="606000" d="2150">How do we actually
compute with it?</p>
<p t="608150" d="1090">It's very simple.</p>
<p t="609240" d="9250">We just say, in constant time,
an algorithm can basically</p>
<p t="618490" d="6670">read in or load a constant
number of words from memory,</p>
<p t="625160" d="7860">do a constant number of
computations on them,</p>
<p t="633020" d="1930">and then write them out.</p>
<p t="634950" d="1200">It's usually called store.</p>
<p t="643539" d="1791">OK, it needs to know
where these words are.</p>
<p t="645330" d="6960">It accesses them by address.</p>
<p t="652290" d="2100">And so I guess I
should write here</p>
<p t="654390" d="7520">you have a constant number of
registers just hanging around.</p>
<p t="661910" d="2130">So you load some
words into registers.</p>
<p t="664040" d="2065">You can do some computations
on those registers.</p>
<p t="666105" d="1375">And then you can
write them back,</p>
<p t="667480" d="1640">storing them in
locations that are</p>
<p t="669120" d="1730">specified by your registers.</p>
<p t="670850" d="1840">So you've ever done
assembly programming,</p>
<p t="672690" d="2820">this is what assembly
programming is like.</p>
<p t="675510" d="4990">And it can be rather annoying to
write algorithms in this model.</p>
<p t="680500" d="1640">But in some sense,
it is reality.</p>
<p t="682140" d="2180">This is how we think
about computers.</p>
<p t="684320" d="1460">If you ignore
things like caches,</p>
<p t="685780" d="2490">this is an accurate
model of computation</p>
<p t="688270" d="2062">that loading,
computing, and storing</p>
<p t="690332" d="1708">all take roughly the
same amount of time.</p>
<p t="692040" d="1680">They all take constant time.</p>
<p t="693720" d="2260">You can manipulate a
whole word at a time.</p>
<p t="695980" d="2700">Now, what exactly is a word?</p>
<p t="698680" d="4150">You know, computers these days,
it's like 32 bits or 64 bits.</p>
<p t="702830" d="2880">But we like to be a
little bit more abstract.</p>
<p t="705710" d="5510">A word is w bits.</p>
<p t="711220" d="1310">It's slightly annoying.</p>
<p t="712530" d="2810">And most of this class, we won't
really worry about what w is.</p>
<p t="715340" d="1940">We'll assume that
we're given as input</p>
<p t="717280" d="1690">a bunch of things
which are words.</p>
<p t="718970" d="1750">So for example, peak finding.</p>
<p t="720720" d="2330">We're given a matrix of numbers.</p>
<p t="723050" d="2330">We didn't really say whether
they're integers or floats</p>
<p t="725380" d="1027">or what.</p>
<p t="726407" d="1083">We don't worry about that.</p>
<p t="727490" d="1320">We just think of
them as words and we</p>
<p t="728810" d="1750">assume that we can
manipulate those words.</p>
<p t="730560" d="2280">In particular, given two
numbers, we can compare them.</p>
<p t="732840" d="980">Which is bigger?</p>
<p t="733820" d="3850">And so we can determine,
is this cell in the matrix</p>
<p t="737670" d="3280">a peak by comparing it with
its neighbors in constant time.</p>
<p t="740950" d="2529">We didn't say why it was
constant time to do that.</p>
<p t="743479" d="1041">But now you kind of know.</p>
<p t="744520" d="1640">If those things are
all words and you</p>
<p t="746160" d="2458">can manipulate a constant number
of words in constant time,</p>
<p t="748618" d="3062">you can tell whether a number
is a peak in constant time.</p>
<p t="751680" d="6250">Some things like w should be at
least log the size of memory.</p>
<p t="761160" d="2410">Because my word should
be able to specify</p>
<p t="763570" d="3350">an index into this array.</p>
<p t="766920" d="1311">And we might use that someday.</p>
<p t="768231" d="1499">But basically, don't
worry about it.</p>
<p t="769730" d="980">Words are words.</p>
<p t="770710" d="1370">Words come in as inputs.</p>
<p t="772080" d="1640">You can manipulate
them and you don't</p>
<p t="773720" d="4520">have to worry about
it for the most part.</p>
<p t="778240" d="1770">In unit four of
this class, we're</p>
<p t="780010" d="2910">going to talk about, what if we
have really giant integers that</p>
<p t="782920" d="1067">don't fit in a word?</p>
<p t="783987" d="1083">How do we manipulate them?</p>
<p t="785070" d="1760">How do we add them,
multiply them?</p>
<p t="786830" d="1660">So that's another topic.</p>
<p t="788490" d="2130">But most of this
class, we'll just</p>
<p t="790620" d="2410">assume everything we're
given is one word.</p>
<p t="793030" d="3860">And it's easy to compute on.</p>
<p t="796890" d="2530">So this is a realistic
model, more or less.</p>
<p t="799420" d="1840">And it's a powerful one.</p>
<p t="801260" d="3970">But a lot of the
time, a lot of code</p>
<p t="805230" d="1960">just doesn't use
arrays-- doesn't need it.</p>
<p t="807190" d="3350">Sometimes we need arrays,
sometimes we don't.</p>
<p t="810540" d="3380">Sometimes you feel like a
nut, sometimes you don't.</p>
<p t="813920" d="4185">So it's useful to think about
somewhat more abstract models</p>
<p t="818105" d="4015">that are not quite as
powerful but offer a simpler</p>
<p t="822120" d="2240">way of thinking about things.</p>
<p t="824360" d="1470">For example, in
this model there's</p>
<p t="825830" d="2054">no dynamic memory allocation.</p>
<p t="827884" d="2166">You probably know you could
implement dynamic memory</p>
<p t="830050" d="2540">allocation because
real computers do it.</p>
<p t="832590" d="1930">But it's nice to
think about a model</p>
<p t="834520" d="2100">where that's taken
care of for you.</p>
<p t="836620" d="3390">It's kind of like a higher
level programming abstraction.</p>
<p t="840010" d="3570">So the one is useful in this
class is the pointer machine.</p>
<p t="843580" d="2610">This basically corresponds to
object oriented programming</p>
<p t="846190" d="3830">in a simple, very
simple version.</p>
<p t="850020" d="2640">So we have dynamically
allocated objects.</p>
<p t="861410" d="8960">And an object has a
constant number of fields.</p>
<p t="874650" d="9390">And a field is going to
be either a word-- so you</p>
<p t="884040" d="2350">can think of this
as, for example,</p>
<p t="886390" d="3080">storing an integer, one
of the input objects</p>
<p t="889470" d="3130">or something you computed on it
or a counter, all these sorts</p>
<p t="892600" d="4970">of things-- or a pointer.</p>
<p t="897570" d="4800">And that's where pointer
machine gets its name.</p>
<p t="902370" d="6940">A pointer is something that
points to another object</p>
<p t="909310" d="5160">or has a special value
null, also known as nil,</p>
<p t="914470" d="1400">also known as none in Python.</p>
<p t="920430" d="3430">OK, how many people have
heard about pointers before?</p>
<p t="923860" d="1637">Who hasn't?</p>
<p t="925497" d="833">Willing to admit it?</p>
<p t="926330" d="900">OK, only a few.</p>
<p t="927230" d="540">That's good.</p>
<p t="927770" d="1250">You should have seen pointers.</p>
<p t="929020" d="2060">You may have heard
them called references.</p>
<p t="931080" d="2620">Modern languages these days
don't call them pointers</p>
<p t="933700" d="1990">because pointers are scary.</p>
<p t="935690" d="2700">But there's a very subtle
difference between them.</p>
<p t="938390" d="2604">And this model actually
really is references.</p>
<p t="940994" d="2291">But for whatever reason, it's
called a pointer machine.</p>
<p t="943285" d="2065">It doesn't matter.</p>
<p t="945350" d="4130">The point is, you've
seem linked lists I hope.</p>
<p t="949480" d="4760">And linked lists have a
bunch of fields in each node.</p>
<p t="954240" d="2250">Maybe you've got a pointer
to the previous element,</p>
<p t="956490" d="4330">a pointer to the next
element, and some value.</p>
<p t="960820" d="3730">So here's a very
simple linked list.</p>
<p t="964550" d="2500">This is what you'd call a
doubly linked list because it</p>
<p t="967050" d="3000">has previous and next pointers.</p>
<p t="970050" d="2340">So the next pointer
points to this node.</p>
<p t="972390" d="2720">The previous pointer
points to this node.</p>
<p t="975110" d="1965">Next pointer points to null.</p>
<p t="977075" d="2865">The previous pointer
points to null, let's say.</p>
<p t="979940" d="1991">So that's a two node
doubly linked list.</p>
<p t="981931" d="2249">You presume we have a pointer
to the head of the list,</p>
<p t="984180" d="2720">maybe a pointer to the
tail of list, whatever.</p>
<p t="986900" d="2495">So this is a structure
in the pointer machine.</p>
<p t="989395" d="1985">It's a data structure.</p>
<p t="991380" d="2410">In Python, you might
call this a named tuple,</p>
<p t="993790" d="4550">or it's just an object
with three attributes,</p>
<p t="998340" d="1750">I guess, they're
called in Python.</p>
<p t="1000090" d="3250">So here we have the value.</p>
<p t="1003340" d="2110">That's a word like an integer.</p>
<p t="1005450" d="1710">And then some things
can be pointers</p>
<p t="1007160" d="1260">that point to other nodes.</p>
<p t="1008420" d="1310">And you can create a new node.</p>
<p t="1009730" d="990">You can destroy a node.</p>
<p t="1010720" d="3590">That's the dynamic
memory allocation.</p>
<p t="1014310" d="2610">In this model, yeah,
pointers are pointers.</p>
<p t="1016920" d="1300">You can't touch them.</p>
<p t="1018220" d="2940">Now, you can implement this
model in a random access</p>
<p t="1021160" d="740">machine.</p>
<p t="1021900" d="4169">A pointer becomes an index
into this giant table.</p>
<p t="1026069" d="2000">And that's more like
the pointers in C</p>
<p t="1028069" d="1693">if you've ever
written C programs.</p>
<p t="1029762" d="1458">Because then you
can take a pointer</p>
<p t="1031220" d="2649">and you can add one to it and
go to the next thing after that.</p>
<p t="1033869" d="1875">In this model, you can
just follow a pointer.</p>
<p t="1035744" d="1313">That's all you can do.</p>
<p t="1037057" d="1833">OK, following a pointer
costs constant time.</p>
<p t="1038890" d="2439">Changing one of these
fields costs constant time.</p>
<p t="1041329" d="3601">All the usual things you might
imagine doing to these objects</p>
<p t="1044930" d="1679">take constant time.</p>
<p t="1046609" d="3146">So it's actually a weaker
model than this one.</p>
<p t="1049755" d="1875">Because you could
implement a pointer machine</p>
<p t="1051630" d="2111">with a random access machine.</p>
<p t="1053741" d="1749">But it offers a different
way of thinking.</p>
<p t="1055490" d="1833">A lot of data structures
are built this way.</p>
<p t="1059705" d="500">Cool.</p>
<p t="1062770" d="2360">So that's the theory side.</p>
<p t="1065130" d="4380">What I'd like to talk about
next is actually in Python,</p>
<p t="1069510" d="4010">what's a reasonable
model of what's going on?</p>
<p t="1073520" d="1640">So these are old models.</p>
<p t="1075160" d="1810">This goes back to the '80s.</p>
<p t="1076970" d="2342">This one probably '80s or '70s.</p>
<p t="1079312" d="1458">So they've been
around a long time.</p>
<p t="1080770" d="1350">People have used them forever.</p>
<p t="1082120" d="2752">Python is obviously much
more recent, at least</p>
<p t="1084872" d="1083">modern versions of Python.</p>
<p t="1091450" d="3340">And it's the model of
computation in some sense</p>
<p t="1094790" d="1410">that we use in this class.</p>
<p t="1096200" d="2000">Because we're implementing
everything in Python.</p>
<p t="1098200" d="3410">And Python offers both a random
access machine perspective</p>
<p t="1101610" d="2820">because it has arrays, and
it offers a pointer machine</p>
<p t="1104430" d="2350">perspective because
it has references,</p>
<p t="1106780" d="1820">because it has pointers.</p>
<p t="1108600" d="2550">So you can do either one.</p>
<p t="1111150" d="1740">But it also has a
lot of operations.</p>
<p t="1112890" d="5290">It doesn't just have load
and store and follow pointer.</p>
<p t="1118180" d="4850">It's got things
like sort and append</p>
<p t="1123030" d="3560">and concatenation of two
lists and lots of things.</p>
<p t="1126590" d="2350">And each of those has a
cost associated with them.</p>
<p t="1128940" d="2050">So whereas the random access
machine and pointer machine,</p>
<p t="1130990" d="1125">they're theoretical models.</p>
<p t="1132115" d="1595">They're designed
to be super simple.</p>
<p t="1133710" d="4520">So it's clear that everything
you do takes constant time.</p>
<p t="1138230" d="2770">In Python, some of the
operations you can do</p>
<p t="1141000" d="2150">take a lot of time.</p>
<p t="1143150" d="2584">Some of the operations in Python
take exponential time to do.</p>
<p t="1145734" d="2416">And you've got to know when
you're writing your algorithms</p>
<p t="1148150" d="3110">down either thinking in a Python
model or your implementing</p>
<p t="1151260" d="2690">your algorithms
in actual Python,</p>
<p t="1153950" d="2310">which operations are
fast and which are slow.</p>
<p t="1156260" d="3444">And that's what I'd like to
spend the next few minutes on.</p>
<p t="1159704" d="1166">There's a lot of operations.</p>
<p t="1160870" d="2750">I'm not going to
cover all of them.</p>
<p t="1163620" d="3660">But we'll cover
more in recitation.</p>
<p t="1167280" d="1850">And there's a whole
bunch in my notes.</p>
<p t="1169130" d="1930">I won't get to all of them.</p>
<p t="1171060" d="5080">So in Python, you can do
random access style things.</p>
<p t="1176140" d="2400">In Python, arrays
are called lists,</p>
<p t="1178540" d="1690">which is super confusing.</p>
<p t="1180230" d="2010">But there you go.</p>
<p t="1182240" d="5870">A list in Python is an
array in real world.</p>
<p t="1188110" d="3175">It's a super cool
array, of course?</p>
<p t="1191285" d="1465">And you can think
of it as a list.</p>
<p t="1192750" d="2710">But in terms implementation,
it's implemented as an array.</p>
<p t="1195460" d="500">Question?</p>
<p t="1195960" d="2700">AUDIENCE: I thought
that [INAUDIBLE].</p>
<p t="1198660" d="2500">PROFESSOR: You thought Python
links lists were linked lists.</p>
<p t="1201160" d="1208">That's why it's so confusing.</p>
<p t="1202368" d="1912">In fact, they are not.</p>
<p t="1204280" d="3350">In, say, scheme, back in the
days when we taught scheme,</p>
<p t="1207630" d="2410">lists are linked lists.</p>
<p t="1210040" d="1540">And it's very different.</p>
<p t="1211580" d="2950">So when you do-- I'll
give an operation here.</p>
<p t="1214530" d="2800">You have a list L, and you
do something like this.</p>
<p t="1221180" d="2210">L is a list object.</p>
<p t="1223390" d="2257">This takes constant time.</p>
<p t="1225647" d="1833">In a linked list, it
would take linear time.</p>
<p t="1227480" d="3290">Because we've got a scan to
position I, scan to position J,</p>
<p t="1230770" d="2230">add 5, and store.</p>
<p t="1233000" d="5030">But conveniently in Python,
this takes constant time.</p>
<p t="1238030" d="1832">And that's important to know.</p>
<p t="1239862" d="1958">I know that the terminology
is super confusing.</p>
<p t="1241820" d="7320">But blame the benevolent
dictator for life.</p>
<p t="1249140" d="6440">On the other hand, you can do
style two, pointer machine,</p>
<p t="1255580" d="2250">using object oriented
programming, obviously.</p>
<p t="1261120" d="4090">I'll just mention
that I'm not really</p>
<p t="1265210" d="2320">worrying about methods here.</p>
<p t="1267530" d="4110">Because methods are just sort of
a way of thinking about things,</p>
<p t="1271640" d="3230">not super important
from a cost standpoint.</p>
<p t="1274870" d="2280">If your object has a constant
number of attributes--</p>
<p t="1277150" d="2150">it can't have like
a million attributes</p>
<p t="1279300" d="1950">or can't have n
executes-- then it</p>
<p t="1281250" d="1640">fits into this
pointer machine model.</p>
<p t="1282890" d="1560">So if you have an
object that only</p>
<p t="1284450" d="2629">has like three things or
10 things or whatever,</p>
<p t="1287079" d="1041">that's a pointer machine.</p>
<p t="1288120" d="1708">You can think of
manipulating that object</p>
<p t="1289828" d="1522">as taking constant time.</p>
<p t="1291350" d="2605">If you are screwing around
the object's dictionary</p>
<p t="1293955" d="1775">and doing lots of
crazy things, then you</p>
<p t="1295730" d="2260">have to be careful about
whether this remains true.</p>
<p t="1297990" d="2470">But as long as you only
have a reasonable number</p>
<p t="1300460" d="2770">of attributes, this
is all fair game.</p>
<p t="1303230" d="3320">And so if you do something like,
if you're implementing a linked</p>
<p t="1306550" d="1635">list, Python I
checked still does not</p>
<p t="1308185" d="1125">have built-in linked lists.</p>
<p t="1309310" d="2120">They're pretty easy
to build, though.</p>
<p t="1311430" d="990">You have a pointer.</p>
<p t="1312420" d="2170">And you just say
x equals x.next.</p>
<p t="1314590" d="4110">That takes constant time
because accessing this field</p>
<p t="1318700" d="3619">in an object of constant
size takes constant time.</p>
<p t="1322319" d="1791">And we don't care what
these constants are.</p>
<p t="1324110" d="1333">That's the beauty of algorithms.</p>
<p t="1325443" d="2007">Because we only care
about scalability with n.</p>
<p t="1327450" d="1700">There's no n here.</p>
<p t="1329150" d="1050">This takes constant time.</p>
<p t="1330200" d="2710">This takes constant time.</p>
<p t="1332910" d="1620">No matter how big
your linked list</p>
<p t="1334530" d="2610">is or no matter how
many objects you have,</p>
<p t="1337140" d="2160">these are constant time.</p>
<p t="1339300" d="2460">OK, let's do some
harder ones, though.</p>
<p t="1341760" d="2720">In general, the
idea is, if you take</p>
<p t="1344480" d="4680">an operation like L.append--
so you have a list.</p>
<p t="1349160" d="2300">And you want to append
some item to the list.</p>
<p t="1351460" d="2120">It's an array, though.</p>
<p t="1353580" d="2210">So think about it.</p>
<p t="1355790" d="3050">The way to figure out
how much does this cost</p>
<p t="1358840" d="1760">is to think about
how it's implemented</p>
<p t="1360600" d="2150">in terms of these
basic operations.</p>
<p t="1362750" d="4030">So these are your sort of
the core concept time things.</p>
<p t="1366780" d="3540">Most everything can be reduced
to thinking about this.</p>
<p t="1370320" d="3000">But sometimes,
it's less obvious.</p>
<p t="1373320" d="2197">L.apend is a little
tricky to think about.</p>
<p t="1375517" d="2083">Because basically, you
have an array of some size.</p>
<p t="1377600" d="2650">And now you want to make
an array one larger.</p>
<p t="1380250" d="2375">And the obvious way to do that
is to allocate a new array</p>
<p t="1382625" d="1083">and copy all the elements.</p>
<p t="1383708" d="1552">That would take linear time.</p>
<p t="1385260" d="1920">Python doesn't do that.</p>
<p t="1387180" d="2730">What does it do?</p>
<p t="1389910" d="1770">Stay tuned for lecture eight.</p>
<p t="1394300" d="2840">It does something
called table doubling.</p>
<p t="1397140" d="1000">It's a very simple idea.</p>
<p t="1398140" d="2420">You can almost get
guess it from the title.</p>
<p t="1400560" d="3386">And if you go to lecture--
is it eight or nine?</p>
<p t="1403946" d="2234">Nine, sorry.</p>
<p t="1406180" d="1870">You'll see how
this can basically</p>
<p t="1408050" d="2770">be done in constant time.</p>
<p t="1410820" d="3040">There's a slight catch,
but basically, think of it</p>
<p t="1413860" d="2420">as a constant time operation.</p>
<p t="1416280" d="1974">Once we have that,
and so this is</p>
<p t="1418254" d="1666">why you should take
this class so you'll</p>
<p t="1419920" d="2000">understand how Python works.</p>
<p t="1421920" d="2690">This is using an algorithmic
concept that was invented,</p>
<p t="1424610" d="2570">I don't know, decades
ago, but is a simple thing</p>
<p t="1427180" d="2589">that we need to do to solve
lots of other problems.</p>
<p t="1429769" d="541">So it's cool.</p>
<p t="1430310" d="3490">There's a lot of features in
Python that use algorithms.</p>
<p t="1433800" d="2700">And that's kind of
why I'm telling you.</p>
<p t="1436500" d="1620">All right, so let's
do another one.</p>
<p t="1438120" d="1090">A little easier.</p>
<p t="1439210" d="1820">What if I want to
concatenate two lists?</p>
<p t="1441030" d="3050">You should know in Python this
is a non-destructive operation.</p>
<p t="1444080" d="3360">You basically take a copy of
L1 and L2 and concatenate them.</p>
<p t="1447440" d="1860">Of course, they're arrays.</p>
<p t="1449300" d="2140">The way to think about
this is to re-implement it</p>
<p t="1451440" d="840">as Python code.</p>
<p t="1452280" d="2350">This is the same
thing as saying, well,</p>
<p t="1454630" d="1810">L is initially empty.</p>
<p t="1456440" d="4810">And then for every item
x and L1, L.append(x).</p>
<p t="1464880" d="2420">And a lot of the times in
documentation for Python,</p>
<p t="1467300" d="3520">you see this sort of here's
what it means, especially</p>
<p t="1470820" d="2700">in the fancier features.</p>
<p t="1473520" d="5359">They give sort of an equivalent
simple Python, if you will.</p>
<p t="1478879" d="1541">This doesn't use
any fancy operations</p>
<p t="1480420" d="1500">that we haven't seen already.</p>
<p t="1481920" d="3130">So now we know this
takes constant time.</p>
<p t="1485050" d="2790">The append, this append,
takes constant time.</p>
<p t="1487840" d="2180">And so the amount of
time here is basically</p>
<p t="1490020" d="3210">order the length of L1.</p>
<p t="1493230" d="3440">And the time here is
order the length of L2.</p>
<p t="1496670" d="2470">And so in total,
it's order-- I'm</p>
<p t="1499140" d="3330">going to be careful and
say 1 plus length of L1</p>
<p t="1502470" d="3690">plus length of L2.</p>
<p t="1506160" d="1900">The 1 plus is just in
case these are both 0.</p>
<p t="1508060" d="3900">It still takes constant time
to build an initial list.</p>
<p t="1511960" d="2060">OK, so there are a
bunch of operations</p>
<p t="1514020" d="1630">that are written in these notes.</p>
<p t="1515650" d="2180">I'm not going to go
through all of them</p>
<p t="1517830" d="1300">because they're tedious.</p>
<p t="1519130" d="3450">But a lot of you, could just
expand out code like this.</p>
<p t="1522580" d="1250">And it's very easy to analyze.</p>
<p t="1523830" d="1416">Whereas you just
look at plus, you</p>
<p t="1525246" d="1424">think, oh, plus
is constant time.</p>
<p t="1526670" d="1989">And plus is constant
time if this is a word</p>
<p t="1528659" d="791">and this is a word.</p>
<p t="1529450" d="2310">But these are entire
data structures.</p>
<p t="1531760" d="2720">And so it's not constant time.</p>
<p t="1534480" d="1514">All right.</p>
<p t="1535994" d="1916">There are more subtle
fun ones to think about.</p>
<p t="1537910" d="5630">Like, if I want to know is x in
the list, how does that happen?</p>
<p t="1543540" d="2330">Any guesses?</p>
<p t="1545870" d="1790">There's an operator
in Python called</p>
<p t="1547660" d="4010">in-- x in L. How long
do you think this takes?</p>
<p t="1555070" d="1700">Altogether?</p>
<p t="1556770" d="2240">Linear, yeah.</p>
<p t="1559010" d="750">Linear time.</p>
<p t="1559760" d="1026">In the worst case,
you're going to have</p>
<p t="1560786" d="1304">to scan through the whole list.</p>
<p t="1562090" d="1410">Lists aren't necessarily sorted.</p>
<p t="1563500" d="1530">We don't know
anything about them.</p>
<p t="1565030" d="1510">So you've got to just
scan through and test</p>
<p t="1566540" d="750">for every item.</p>
<p t="1567290" d="1950">Is x equal to that item?</p>
<p t="1569240" d="2772">And it's even worse if
equal equals costs a lot.</p>
<p t="1572012" d="1708">So if x is some really
complicated thing,</p>
<p t="1573720" d="3150">you have to take
that into account.</p>
<p t="1576870" d="1530">OK, blah, blah, blah.</p>
<p t="1578400" d="850">OK, another fun one.</p>
<p t="1579250" d="2430">This is like a pop quiz.</p>
<p t="1581680" d="3980">How long's it take to
compute the length of a list?</p>
<p t="1585660" d="1140">Constant.</p>
<p t="1586800" d="2397">Yeah, luckily, if you
didn't know anything,</p>
<p t="1589197" d="2333">you'd have to scan through
the list and count the items.</p>
<p t="1591530" d="2400">But in Python, lists
are implemented</p>
<p t="1593930" d="1170">with a counter built in.</p>
<p t="1595100" d="2170">It always stores the
list at the beginning--</p>
<p t="1597270" d="1350">stores the length of the
list at the beginning.</p>
<p t="1598620" d="1170">So you just look it up.</p>
<p t="1599790" d="2510">This is instantaneous.</p>
<p t="1602300" d="1390">It's important, though.</p>
<p t="1603690" d="2580">That can matter.</p>
<p t="1606270" d="1650">All right.</p>
<p t="1607920" d="970">Let's do some more.</p>
<p t="1618900" d="1470">What if I want to sort a list?</p>
<p t="1620370" d="1000">How long does that take?</p>
<p t="1626580" d="7220">N log n where n is the
length of the list.</p>
<p t="1633800" d="6650">Technically times the time
to compare two items, which</p>
<p t="1640450" d="1680">usually we're just
sorting words.</p>
<p t="1642130" d="3720">And so this is constant time.</p>
<p t="1645850" d="1680">If you look at Python
sorting algorithm,</p>
<p t="1647530" d="1710">it uses a comparison sort.</p>
<p t="1649240" d="6020">This is the topic of lectures
three and four and seven.</p>
<p t="1655260" d="2240">But in particular,
the very next lecture,</p>
<p t="1657500" d="4170">we will see how this is
done in n log n time.</p>
<p t="1661670" d="4020">And that is using algorithms.</p>
<p t="1665690" d="6520">All right, let's
go to dictionaries.</p>
<p t="1672210" d="3030">Python called dicts.</p>
<p t="1675240" d="2360">And these let you do things.</p>
<p t="1677600" d="2000">They're a generalization
of lists in some sense.</p>
<p t="1679600" d="3530">Instead of putting just an
index here, an integer between 0</p>
<p t="1683130" d="2890">and the length minus 1, you
can put an arbitrary key</p>
<p t="1686020" d="2230">and store a value, for example.</p>
<p t="1688250" d="1690">How long does this take?</p>
<p t="1689940" d="2855">I'm not going to ask you
because, it's not obvious.</p>
<p t="1692795" d="4065">In fact, this is one of the
most important data structures</p>
<p t="1696860" d="1720">in all of computer science.</p>
<p t="1698580" d="1830">It's called a hash table.</p>
<p t="1700410" d="4860">And it is the topic of
lectures eight through 10.</p>
<p t="1705270" d="3080">So stay tuned for how to
do this in constant time,</p>
<p t="1708350" d="1900">how to be able to
store an arbitrary key,</p>
<p t="1710250" d="1870">get it back out
in constant time.</p>
<p t="1712120" d="2730">This is assuming the
key is a single word.</p>
<p t="1714850" d="770">Yeah.</p>
<p t="1715620" d="2625">AUDIENCE: Does it first check to
see whether the key is already</p>
<p t="1718245" d="1455">in the dictionary?</p>
<p t="1719700" d="2890">PROFESSOR: Yeah, it will
clobber any existing key.</p>
<p t="1722590" d="2142">There's also, you
know, you can test</p>
<p t="1724732" d="1458">whether a key is
in the dictionary.</p>
<p t="1726190" d="1736">That also takes constant time.</p>
<p t="1727926" d="1874">You can delete something
from the dictionary.</p>
<p t="1729800" d="3910">All the usual-- dealing with
a single key in dictionaries,</p>
<p t="1733710" d="2800">obviously dictionary.update,
that involves a lot of keys.</p>
<p t="1736510" d="1560">That doesn't take some time.</p>
<p t="1738070" d="989">How long does it take?</p>
<p t="1739059" d="1916">Well, you write out a
for loop and count them.</p>
<p t="1740975" d="1820">AUDIENCE: But how can you
see whether [INAUDIBLE]</p>
<p t="1742795" d="1365">dictionary in constant time?</p>
<p t="1744160" d="1958">PROFESSOR: How do you do
this in constant time?</p>
<p t="1746118" d="2102">Come to lecture
eight through 10.</p>
<p t="1748220" d="2200">I should say a
slight catch, which</p>
<p t="1750420" d="3060">is this is constant time
with high probability.</p>
<p t="1753480" d="2354">It's a randomized algorithm.</p>
<p t="1755834" d="1541">It doesn't always
take constant time.</p>
<p t="1757375" d="1195">It's always correct.</p>
<p t="1758570" d="2810">But sometimes, very rarely,
it takes a little more</p>
<p t="1761380" d="1380">than constant time.</p>
<p t="1762760" d="3410">And I'm going to
abbreviate this WHP.</p>
<p t="1766170" d="3240">And we'll see more what
that means mostly, actually,</p>
<p t="1769410" d="980">in 6046.</p>
<p t="1770390" d="3044">But we'll see a fair amount
in 6006 on how this works</p>
<p t="1773434" d="916">and how it's possible.</p>
<p t="1774350" d="1330">It's a big area of research.</p>
<p t="1775680" d="1750">A lot of people work on hashing.</p>
<p t="1777430" d="1690">It's very cool and
it's super useful.</p>
<p t="1779120" d="2600">If you write any code these
days, you use a dictionary.</p>
<p t="1781720" d="3750">It's the way to solve problems.</p>
<p t="1785470" d="2520">I'm basically using
Python is a platform</p>
<p t="1787990" d="2850">to advertise the rest of the
class you may have noticed.</p>
<p t="1790840" d="2760">Not every topic we cover in
this class is already in Python,</p>
<p t="1793600" d="1610">but a lot of them are.</p>
<p t="1795210" d="3000">So we've got table doubling.</p>
<p t="1798210" d="4860">We've got dictionaries.</p>
<p t="1803070" d="1390">We've got sorting.</p>
<p t="1804460" d="4840">Another one is longs, which
are long integers in Python</p>
<p t="1809300" d="2690">through version two.</p>
<p t="1811990" d="5860">And this is the
topic of lecture 11.</p>
<p t="1817850" d="3510">And so for fun, if I have
two integers x and y,</p>
<p t="1821360" d="3250">and let's say one of them
is this many words long</p>
<p t="1824610" d="1750">and the other one is
this many words long,</p>
<p t="1826360" d="1791">how long do you think
it takes to add them?</p>
<p t="1833290" d="500">Guesses?</p>
<p t="1837590" d="2430">AUDIENCE: [INAUDIBLE].</p>
<p t="1840020" d="880">PROFESSOR: Plus?</p>
<p t="1840900" d="680">Times?</p>
<p t="1841580" d="2247">Plus is the answer.</p>
<p t="1843827" d="1333">You can do it in that much time.</p>
<p t="1847936" d="1874">If you think about the
grade school algorithm</p>
<p t="1849810" d="3220">for adding really big
multi-digit numbers,</p>
<p t="1853030" d="1470">it'll only take that much time.</p>
<p t="1854500" d="2270">Multiplication is a
little bit harder, though.</p>
<p t="1856770" d="1750">If you look at the
grade school algorithm,</p>
<p t="1858520" d="2790">it's going to be x times y--
it's quadratic time not so</p>
<p t="1861310" d="1350">good.</p>
<p t="1862660" d="2940">The algorithm that's
implemented in Python</p>
<p t="1865600" d="6270">is x plus y to the
log base 2 of 3.</p>
<p t="1871870" d="5010">By the way, I always write
LG to mean log base 2.</p>
<p t="1876880" d="3550">Because it only has two
letters, so OK, this is 2.</p>
<p t="1880430" d="4280">Log base 2 of 3 is about 1.6.</p>
<p t="1884710" d="2530">So while the straightforward
algorithm is basically</p>
<p t="1887240" d="4170">x plus y squared, this one
is x plus y to the 1.6 power,</p>
<p t="1891410" d="1500">a little better than quadratic.</p>
<p t="1892910" d="4770">And the Python developers
found that was faster</p>
<p t="1897680" d="1670">than grade school
multiplication.</p>
<p t="1899350" d="1140">And so that's what
they implemented.</p>
<p t="1900490" d="2083">And that is something we
will cover in lecture 11,</p>
<p t="1902573" d="667">how to do that.</p>
<p t="1903240" d="1270">It's pretty cool.</p>
<p t="1904510" d="1780">There are faster
algorithms, but this</p>
<p t="1906290" d="4140">is one that works
quite practically.</p>
<p t="1910430" d="1650">One more.</p>
<p t="1912080" d="3372">Heap queue, this is in the
Python standard library</p>
<p t="1915452" d="1958">and implements something
called the heap, which</p>
<p t="1917410" d="2130">will be in lecture four.</p>
<p t="1919540" d="3240">So, coming soon to a
classroom near you.</p>
<p t="1922780" d="1980">All right, enough advertisement.</p>
<p t="1924760" d="2440">That gives you some idea of
the model of computation.</p>
<p t="1927200" d="4130">There's a whole bunch more in
these notes which are online.</p>
<p t="1931330" d="1600">Go check them out.</p>
<p t="1932930" d="4424">And some of them, we'll
cover in recitation tomorrow.</p>
<p t="1937354" d="2416">I'd like to-- now that we are
sort of comfortable for what</p>
<p t="1939770" d="3580">costs what in Python, I
want to do a real example.</p>
<p t="1943350" d="1802">So last time, we
did peak finding.</p>
<p t="1945152" d="1708">We're going to have
another example which</p>
<p t="1946860" d="4540">is called document distance.</p>
<p t="1951400" d="780">So let's do that.</p>
<p t="1955390" d="1380">Any questions before we go on?</p>
<p t="1960235" d="990">All right.</p>
<p t="1990960" d="4880">So document distance problem
is, I give you two documents.</p>
<p t="1995840" d="3210">I'll call them D1 D2.</p>
<p t="1999050" d="3130">And I want to compute the
distance between them.</p>
<p t="2002180" d="2970">And the first question
is, what does that mean?</p>
<p t="2005150" d="2020">What is this distance function?</p>
<p t="2007170" d="2380">Let me first tell
you some motivations</p>
<p t="2009550" d="2460">for computing document distance.</p>
<p t="2012010" d="3570">Let's say you're
Google and you're</p>
<p t="2015580" d="1550">cataloging the entire web.</p>
<p t="2017130" d="3930">You'd like to know when two web
pages are basically identical.</p>
<p t="2021060" d="2931">Because then you store less
and because you present it</p>
<p t="2023991" d="999">differently to the user.</p>
<p t="2024990" d="1780">You say, well,
there's this page.</p>
<p t="2026770" d="1550">And there's lots
of extra copies.</p>
<p t="2028320" d="3150">But you just need--
here's the canonical one.</p>
<p t="2031470" d="1344">Or you're Wikipedia.</p>
<p t="2032814" d="2166">And I don't know if you've
ever looked at Wikipedia.</p>
<p t="2034980" d="1791">There's a list of all
mirrors of Wikipedia.</p>
<p t="2036771" d="1829">There's like millions of them.</p>
<p t="2038600" d="3020">And they find them by hand.</p>
<p t="2041620" d="2540">But you could do that
using document distance.</p>
<p t="2044160" d="1520">Say, are these
basically identical</p>
<p t="2045680" d="1830">other than like some
stuff at the-- junk</p>
<p t="2047510" d="2606">at the beginning or the end?</p>
<p t="2050116" d="2333">Or if you're teaching this
class and you want to detect,</p>
<p t="2052449" d="2050">are two problem sets cheating?</p>
<p t="2054499" d="791">Are they identical?</p>
<p t="2055290" d="940">We do this a lot.</p>
<p t="2056230" d="2401">I'm not going to tell you
what distance function we use.</p>
<p t="2058631" d="1499">Because that would
defeat the point.</p>
<p t="2060130" d="1790">It's not the one
we cover in class.</p>
<p t="2061920" d="3850">But we use automated tests
for whether you're cheating.</p>
<p t="2065770" d="3480">I've got some more.</p>
<p t="2069250" d="1320">Web search.</p>
<p t="2070570" d="1310">Let's say you're Google again.</p>
<p t="2071880" d="3259">And you want to
implement searching.</p>
<p t="2075139" d="2250">Like, I give you three words.</p>
<p t="2077389" d="3100">I'm searching for
introduction to algorithms.</p>
<p t="2080489" d="1791">You can think of
introduction to algorithms</p>
<p t="2082280" d="1700">as a very short document.</p>
<p t="2083980" d="2000">And you want to test
whether that document is</p>
<p t="2085980" d="2436">similar to all the other
documents on the web.</p>
<p t="2088416" d="1874">And the one that's most
similar, the one that</p>
<p t="2090290" d="1530">has the small
distance, that's maybe</p>
<p t="2091820" d="1149">what you want to put at the top.</p>
<p t="2092969" d="1583">That's obviously not
what Google does.</p>
<p t="2094552" d="2417">But it's part of what it does.</p>
<p t="2096969" d="1781">So that's why you might care.</p>
<p t="2098750" d="1530">It's partly also
just a toy problem.</p>
<p t="2100280" d="3440">It lets us illustrate
a lot of the techniques</p>
<p t="2103720" d="4070">that we develop in this class.</p>
<p t="2107790" d="4490">All right, I'm going
to think of a document</p>
<p t="2112280" d="1455">as a sequence of words.</p>
<p t="2116790" d="2620">Just to be a little
bit more formal,</p>
<p t="2119410" d="2200">what do I mean by document?</p>
<p t="2121610" d="4540">And a word is just
going to be a string</p>
<p t="2126150" d="3874">of alphanumeric
characters-- A through Z</p>
<p t="2130024" d="916">and zero through nine.</p>
<p t="2135180" d="1800">OK, so if I have a
document which you also</p>
<p t="2136980" d="2220">think of as a string
and you basically</p>
<p t="2139200" d="2840">delete all the white space and
punctuation all the other junk</p>
<p t="2142040" d="1060">that's in there.</p>
<p t="2143100" d="3720">This Everything in between
those, those are the words.</p>
<p t="2146820" d="2810">That's a simple definition
of decomposing documents</p>
<p t="2149630" d="1860">into words.</p>
<p t="2151490" d="1750">And now we can think
of about what--</p>
<p t="2153240" d="2100">I want to know whether
D1 and D2 are similar.</p>
<p t="2155340" d="1660">And I've thought
about my document</p>
<p t="2157000" d="1300">as a collection of words.</p>
<p t="2158300" d="4240">Maybe they're similar if they
share a lot of words in common.</p>
<p t="2162540" d="3120">So that's the idea.</p>
<p t="2165660" d="5890">Look at shared words
and use that to define</p>
<p t="2171550" d="750">document distance.</p>
<p t="2172300" d="2314">This is obviously only one
way to define distance.</p>
<p t="2174614" d="1666">It'll be the way we
do it in this class.</p>
<p t="2176280" d="4450">But there are lots of
other possibilities.</p>
<p t="2180730" d="7080">So I'm going to
think of a document.</p>
<p t="2187810" d="1050">It's a sequence of words.</p>
<p t="2188860" d="3295">But I could also think
of it as a vector.</p>
<p t="2195090" d="6240">So if I have a document D and
I have a word W, this D of W</p>
<p t="2201330" d="2600">is going to be the
number of times</p>
<p t="2203930" d="3230">that word occurs
in the document.</p>
<p t="2207160" d="5100">So, number of recurrences
W in the document D.</p>
<p t="2212260" d="880">So it's a number.</p>
<p t="2213140" d="1340">It's an integer.</p>
<p t="2214480" d="2030">Non-negative integer.</p>
<p t="2216510" d="1089">Could be 0.</p>
<p t="2217599" d="541">Could be one.</p>
<p t="2218140" d="2300">Could be a million.</p>
<p t="2220440" d="2770">I think of this
as a giant vector.</p>
<p t="2223210" d="4590">A vector is indexed
by all words.</p>
<p t="2227800" d="2310">And for each of them,
there's some frequency.</p>
<p t="2230110" d="1420">Of lot of them are zero.</p>
<p t="2231530" d="4576">And then some of them have some
positive number occurrences.</p>
<p t="2236106" d="1374">You could think
of every document</p>
<p t="2237480" d="4874">is as being one of these
plots in this common axis.</p>
<p t="2242354" d="1666">There's infinitely
many words down here.</p>
<p t="2244020" d="1200">So it's kind of a big axis.</p>
<p t="2245220" d="2380">But it's one way to
draw the picture.</p>
<p t="2247600" d="8820">OK, so for example, take two
very important documents.</p>
<p t="2256420" d="1850">Everybody likes cats and dogs.</p>
<p t="2258270" d="3240">So these are two word documents.</p>
<p t="2261510" d="1380">And so we can draw them.</p>
<p t="2262890" d="1999">Because there's only three
different words here,</p>
<p t="2264889" d="2555">we can draw them in
three dimensional space.</p>
<p t="2267444" d="1666">Beyond that, it's a
little hard to draw.</p>
<p t="2269110" d="3900">So we have, let's say,
which one's the-- let's say</p>
<p t="2273010" d="3540">this one's the-- makes
it easier to draw.</p>
<p t="2276550" d="3800">So there's going to be
just zero here and one.</p>
<p t="2280350" d="5960">For each of the axes, let's say
this is dog and this is cat.</p>
<p t="2286310" d="4200">OK, so the cat has won the--
it has one cat and no dog.</p>
<p t="2290510" d="1660">So it's here.</p>
<p t="2292170" d="3310">It's a vector
pointing out there.</p>
<p t="2295480" d="5512">The dog you've got
basically pointing there.</p>
<p t="2300992" d="1208">OK, so these are two vectors.</p>
<p t="2305150" d="2490">So how do I measure how
different two vectors are?</p>
<p t="2307640" d="2595">Any suggestions from
vector calculus?</p>
<p t="2313864" d="1695">AUDIENCE: Inner product?</p>
<p t="2315559" d="1041">PROFESSOR: Inner product?</p>
<p t="2316600" d="2180">Yeah, that's good suggestion.</p>
<p t="2318780" d="2770">Any others.</p>
<p t="2321550" d="1460">OK, we'll go with inner product.</p>
<p t="2323010" d="5579">I like inner product,
also known as dot product.</p>
<p t="2328589" d="1041">Just define that quickly.</p>
<p t="2336780" d="2010">So we could-- I'm going
to call this D prime</p>
<p t="2338790" d="3570">because it's not what
we're going to end up with.</p>
<p t="2342360" d="3800">We could think of this as
the dot product of D1 and D2,</p>
<p t="2346160" d="11220">also known as the sum over all
words of D1 of W times D2 of W.</p>
<p t="2357380" d="2630">So for example, you take the
dot product of these two guys.</p>
<p t="2360010" d="1530">Those match.</p>
<p t="2361540" d="6400">So you get one point there,
cat and dog multiplied by zero.</p>
<p t="2367940" d="2660">So you don't get much there.</p>
<p t="2370600" d="2810">So this is some
measure of distance.</p>
<p t="2373410" d="4810">But it's a measure of,
actually, of commonality.</p>
<p t="2378220" d="2940">So it would be sort of
inverse distance, sorry.</p>
<p t="2381160" d="2049">If you have a high
dot product, you</p>
<p t="2383209" d="1291">have a lot of things in common.</p>
<p t="2384500" d="1710">Because a lot of these
things didn't be--</p>
<p t="2386210" d="1630">wasn't zero times something.</p>
<p t="2387840" d="2620">It's actually a positive number
times some positive number.</p>
<p t="2390460" d="2737">If you have a lot of shared
words, than that looks good.</p>
<p t="2393197" d="2083">The trouble of this is if
I have a long document--</p>
<p t="2395280" d="3930">say, a million words--
and it's 99% in common</p>
<p t="2399210" d="3550">with another document
that's a million words long,</p>
<p t="2402760" d="3550">it's still-- it
looks super similar.</p>
<p t="2406310" d="2660">Actually, I need to do
it the other way around.</p>
<p t="2408970" d="3297">Let's say it's a million words
long and half of the words</p>
<p t="2412267" d="583">are in common.</p>
<p t="2412850" d="2340">So not that many,
but a fair number.</p>
<p t="2415190" d="3289">Then I have a score
of like 500,000.</p>
<p t="2418479" d="2541">And then I have two documents
which are, say, 100 words long.</p>
<p t="2421020" d="1520">And they're identical.</p>
<p t="2422540" d="3130">Their score is maybe only 100.</p>
<p t="2425670" d="1640">So even though
they're identical,</p>
<p t="2427310" d="1860">it's not quite scale invariant.</p>
<p t="2429170" d="2460">So it's not quite
a perfect measure.</p>
<p t="2431630" d="1611">Any suggestions for
how to fix this?</p>
<p t="2433241" d="1499">This, I think, is
a little trickier.</p>
<p t="2434740" d="982">Yeah?</p>
<p t="2435722" d="1917">AUDIENCE: Divide by the
length of the vectors?</p>
<p t="2437639" d="1957">PROFESSOR: Divide by the
length of the vectors.</p>
<p t="2439596" d="1374">I think that's worth a pillow.</p>
<p t="2440970" d="2310">Haven't done any pillows yet.</p>
<p t="2443280" d="1490">Sorry about that.</p>
<p t="2444770" d="2780">So, divide by the
length of vector.</p>
<p t="2447550" d="1897">That's good.</p>
<p t="2449447" d="1583">I'm going to call
this D double prime.</p>
<p t="2451030" d="3160">Still not quite
the right answer.</p>
<p t="2454190" d="2050">Or not-- no, it's pretty good.</p>
<p t="2456240" d="1820">It's pretty good.</p>
<p t="2458060" d="1900">So here, the length
of the vectors</p>
<p t="2459960" d="2070">is the number of
words that occur</p>
<p t="2462030" d="4580">in them This is pretty cool.</p>
<p t="2466610" d="4000">But does anyone
recognize this formula?</p>
<p t="2470610" d="1590">Angle, yeah.</p>
<p t="2472200" d="2450">It's a lot like the angle
between the two vectors.</p>
<p t="2474650" d="4020">It's just off by an arc cos.</p>
<p t="2478670" d="2559">This is the cosine of the
angle between the two vectors.</p>
<p t="2481229" d="791">And I'm a geometer.</p>
<p t="2482020" d="1000">I like geometry.</p>
<p t="2483020" d="2090">So if you take arc
cos of that thing,</p>
<p t="2485110" d="2410">that's a well established
distance metric.</p>
<p t="2487520" d="4690">This goes back to '75,
if you can believe it,</p>
<p t="2492210" d="2640">back when people-- early
days of document, information</p>
<p t="2494850" d="2735">retrieval, way before
the web, people</p>
<p t="2497585" d="3085">were still working
on this stuff.</p>
<p t="2500670" d="3320">So it's a natural measure of the
angle between the two vectors.</p>
<p t="2503990" d="2700">If it's 0, they're
basically identical.</p>
<p t="2506690" d="2980">If it's 90 degrees, they're
really, really different.</p>
<p t="2509670" d="3360">And so that gives you a nice way
to compute document distance.</p>
<p t="2513030" d="2640">The question is, how do we
actually compute that measure?</p>
<p t="2515670" d="2350">Now that we've come up with
something that's reasonable,</p>
<p t="2518020" d="2440">how do I actually
find this value?</p>
<p t="2520460" d="3470">I need to compute these
vectors-- the number</p>
<p t="2523930" d="2570">of recurrences of each
word in the document.</p>
<p t="2526500" d="2317">And I need you compute
the dot product.</p>
<p t="2528817" d="1083">And then I need to divide.</p>
<p t="2529900" d="791">That's really easy.</p>
<p t="2530691" d="2569">So, dot product--
and I also need</p>
<p t="2533260" d="2350">to decompose a document
to a list of words.</p>
<p t="2535610" d="1882">So there are three
things I need to do.</p>
<p t="2537492" d="958">Let me write them down.</p>
<p t="2550417" d="958">So a sort of algorithm.</p>
<p t="2556580" d="6165">There's one, split a
document into words.</p>
<p t="2566130" d="4910">Second is compute
word frequencies,</p>
<p t="2571040" d="3040">how many times
each word appears.</p>
<p t="2574080" d="1780">This is the document vectors .</p>
<p t="2578380" d="3640">And then the third step is
to compute the dot product.</p>
<p t="2587124" d="2166">Let me tell you a little
bit about how each of those</p>
<p t="2589290" d="1400">is done.</p>
<p t="2590690" d="4170">Some of these will be covered
more in future lectures.</p>
<p t="2594860" d="2120">I want to give you an overview.</p>
<p t="2596980" d="2820">There's a lot of ways to
do each of these steps.</p>
<p t="2599800" d="2100">If you look at the--
next to the lecture</p>
<p t="2601900" d="3410">notes for this lecture two,
there's a bunch of code</p>
<p t="2605310" d="3330">and a bunch of data
examples of documents--</p>
<p t="2608640" d="1890">big corpuses of text.</p>
<p t="2610530" d="1540">And you can run,
I think, there are</p>
<p t="2612070" d="2690">eight different
algorithms for it.</p>
<p t="2614760" d="2250">And let me give you--
actually, why don't I</p>
<p t="2617010" d="2050">cut to the chase a
little bit and tell you</p>
<p t="2619060" d="3370">about the run times of these
different implementations</p>
<p t="2622430" d="1001">of this same algorithms.</p>
<p t="2623431" d="2207">There are lots of sort of
versions of this algorithm.</p>
<p t="2625638" d="1272">We implement it a whole bunch.</p>
<p t="2626910" d="2940">Every semester I teach this, I
change them a little bit more,</p>
<p t="2629850" d="2120">add a few more variants.</p>
<p t="2631970" d="3290">So version one, on
a particular pair</p>
<p t="2635260" d="5440">of documents which is like a
megabyte-- not very much text--</p>
<p t="2640700" d="4760">it takes 228.1
seconds-- super slow.</p>
<p t="2645460" d="1330">Pathetic.</p>
<p t="2646790" d="2620">Then we do a little bit
of algorithmic tweaking.</p>
<p t="2649410" d="2370">We get down to 164 seconds.</p>
<p t="2651780" d="2960">Then we get to 123 seconds.</p>
<p t="2654740" d="2600">Then we get down to 71 seconds.</p>
<p t="2657340" d="4120">Then we get down
to 18.3 seconds.</p>
<p t="2661460" d="3670">And then we get to 11.5 seconds.</p>
<p t="2665130" d="3140">Then we get to 1.8 seconds.</p>
<p t="2668270" d="3490">Then we get to 0.2 seconds.</p>
<p t="2671760" d="1870">So factor of 1,000.</p>
<p t="2673630" d="2900">This is just in Python.</p>
<p t="2676530" d="2200">2/10 of a second to
process a megabytes.</p>
<p t="2678730" d="680">It's all right.</p>
<p t="2679410" d="1340">It's getting reasonable.</p>
<p t="2680750" d="1219">This is not so reasonable.</p>
<p t="2681969" d="1791">Some of these improvements
are algorithmic.</p>
<p t="2683760" d="2540">Some of them are
just better coding.</p>
<p t="2686300" d="2980">So there's improving
the constant factors.</p>
<p t="2689280" d="3430">But if you look at
larger and larger texts,</p>
<p t="2692710" d="1500">this will become
even more dramatic.</p>
<p t="2694210" d="2010">Because a lot of these
were improvements</p>
<p t="2696220" d="3570">from quadratic time algorithms
to linear and log n algorithms.</p>
<p t="2699790" d="2642">And so for a megabyte, yeah,
it's a reasonable improvement.</p>
<p t="2702432" d="2458">But if you look at a gigabyte,
it'll be a huge improvement.</p>
<p t="2704890" d="1209">There will be no comparison.</p>
<p t="2706099" d="1541">In fact, there will
be no comparison.</p>
<p t="2707640" d="1458">Because this one
will never finish.</p>
<p t="2709098" d="2232">So the reason I ran
such a small example</p>
<p t="2711330" d="2210">so I could have patience
to wait for this one.</p>
<p t="2713540" d="3510">But this one you could run
on the bigger examples.</p>
<p t="2717050" d="5440">All right, so where do
I want to go from here?</p>
<p t="2722490" d="1890">Five minutes.</p>
<p t="2724380" d="2180">I want to tell you about
some of those improvements</p>
<p t="2726560" d="2820">and some of the algorithms here.</p>
<p t="2729380" d="2390">Let's start with
this very simple one.</p>
<p t="2731770" d="4555">How would you split a
document into words in Python?</p>
<p t="2736325" d="500">Yeah?</p>
<p t="2736825" d="1455">AUDIENCE: [INAUDIBLE].</p>
<p t="2738280" d="2655">Iterate through the document,
[INAUDIBLE] the dictionary?</p>
<p t="2740935" d="1625">PROFESSOR: Iterate
through the-- that's</p>
<p t="2742560" d="1930">actually how we do number two.</p>
<p t="2744490" d="2410">OK, we can talk about that one.</p>
<p t="2746900" d="5320">Iterate through the
words in the document</p>
<p t="2752220" d="1470">and put it in a dictionary.</p>
<p t="2753690" d="6290">Let's say, count of
word plus equals 1.</p>
<p t="2759980" d="2340">This would work if count
is something called a count</p>
<p t="2762320" d="3120">dictionary if you're
super Pythonista.</p>
<p t="2765440" d="2500">Otherwise, you have to check,
is the word in the dictionary?</p>
<p t="2767940" d="1670">If not, set it to one.</p>
<p t="2769610" d="2849">If it is there, add one to it.</p>
<p t="2772459" d="1541">But I think you know
what this means.</p>
<p t="2774000" d="1859">This will count the
number of words--</p>
<p t="2775859" d="2541">this will count the frequency
of each word in the dictionary.</p>
<p t="2778400" d="2620">And becomes dictionaries
run in constant time</p>
<p t="2781020" d="5000">with high probability--
with high probability--</p>
<p t="2786020" d="5150">this will take order--
well, cheating a little bit.</p>
<p t="2791170" d="1460">Because words can
be really long.</p>
<p t="2792630" d="2850">And so to reduce a word
down to a machine word</p>
<p t="2795480" d="3330">could take order the
length of the word time.</p>
<p t="2798810" d="1400">To a little more
precise, this is</p>
<p t="2800210" d="1416">going to be the
sum of the lengths</p>
<p t="2801626" d="4174">of the words in the
document, which is also</p>
<p t="2805800" d="2664">known as a length of
the document, basically.</p>
<p t="2808464" d="666">So this is good.</p>
<p t="2809130" d="2435">This is linear time
with high probability.</p>
<p t="2814500" d="1270">OK, that's a good algorithm.</p>
<p t="2815770" d="6620">That is introduced
in algorithm four.</p>
<p t="2822390" d="2237">So we got a significant boost.</p>
<p t="2824627" d="1333">There are other ways to do this.</p>
<p t="2825960" d="3230">For example, you
could sort the words</p>
<p t="2829190" d="1740">and then run through
the sorted list</p>
<p t="2830930" d="2500">and count, how many do you
get in a row for each one?</p>
<p t="2833430" d="2495">If it's sorted, you
can count-- I mean,</p>
<p t="2835925" d="2375">all the identical words are
put right next to each other.</p>
<p t="2838300" d="1500">So it's easy to count them.</p>
<p t="2839800" d="1510">And that'll run almost as fast.</p>
<p t="2841310" d="1380">That was one of
these algorithms.</p>
<p t="2846470" d="2880">OK, so that's a couple
different ways to do that.</p>
<p t="2849350" d="1390">Let's go back to
this first step.</p>
<p t="2850740" d="3045">How would you split a document
into words in the first place?</p>
<p t="2853785" d="499">Yeah?</p>
<p t="2854284" d="2333">AUDIENCE: Search circulated
spaces and then [INAUDIBLE].</p>
<p t="2856617" d="2533">PROFESSOR: Run through
though the string.</p>
<p t="2859150" d="2720">And every time you see anything
that's not alphanumeric,</p>
<p t="2861870" d="1380">start a new word.</p>
<p t="2863250" d="2130">OK, that would run
in linear time.</p>
<p t="2865380" d="2000">That's a good answer.</p>
<p t="2867380" d="1210">So it's not hard.</p>
<p t="2868590" d="5620">If you're a fancy Pythonista,
you might do it like this.</p>
<p t="2881430" d="1055">Remember my Reg Exes.</p>
<p t="2885040" d="2050">This will find all the
words in a document.</p>
<p t="2887090" d="3570">Trouble is, in general,
re takes exponential time.</p>
<p t="2890660" d="3600">So if you think about
algorithms, be very careful.</p>
<p t="2894260" d="1750">Unless you know how
re is implemented,</p>
<p t="2896010" d="3790">this probably will
run in linear time.</p>
<p t="2899800" d="2200">But it's not obvious at all.</p>
<p t="2902000" d="2210">Do anything fancy with
regular expressions.</p>
<p t="2904210" d="2333">If you don't know what this
means, don't worry about it.</p>
<p t="2906543" d="557">Don't use it.</p>
<p t="2907100" d="1890">If you know about it, be
very careful in this class</p>
<p t="2908990" d="666">when you use re.</p>
<p t="2909656" d="2008">Because it's not
always linear time.</p>
<p t="2911664" d="1666">But there is an easy
algorithm for this,</p>
<p t="2913330" d="4745">which is just scan through
and look for alpha numerics.</p>
<p t="2918075" d="875">String them together.</p>
<p t="2918950" d="499">It's good.</p>
<p t="2919449" d="2081">There's a few other
algorithms here in the notes.</p>
<p t="2921530" d="1140">You should check them out.</p>
<p t="2922670" d="4260">And for fun, look at this code
and see how small differences</p>
<p t="2926930" d="2260">make dramatic difference
in performance.</p>
<p t="2929190" d="2430">Next class will
be about sorting.</p>
</body>
</timedtext>